#!/bin/bash

log() {
  echo "[Backup] ${1}"
  return 0
}

log_done() {
  echo "[Backup] Done"
  return 0
}

error() {
  echo >&2 "[Backup] ${1}"
  return 0
}

error_exit() {
  echo >&2 "[Backup] ${1}"
  disable_maintenence
  exit 1
}

backup_source=$(echo ${NEXTCLOUD_VOLUME} | sed 's:/*$::')
nc_config="${backup_source}/config/config.php"

enable_maintenence() {
  log "Enabling Nextcloud maintenence mode"
  sed -i -E "s/(^\s*'maintenance'\s*=>\s*)(true|false)/\1true/" ${nc_config}
}

disable_maintenence() {
  log "Disabling Nextcloud maintenence mode"
  sed -i -E "s/(^\s*'maintenance'\s*=>\s*)(true|false)/\1false/" ${nc_config}
}

trap ctrl_c INT TERM

ctrl_c() {
  echo -en "\n[Backup] Caught stop signal. Clean up and exit\n"
  disable_maintenence
  rm -Rf ${backup_destination}
  exit $?
}

# --- SETUP ---

backup_date=$(date +%Y%m%dT%H%M%S.%3N%Z)
backup_destination="/backups/nextcloud_${backup_date}"

pg_host="$(sed -rnE "s/^\s*'dbhost'\s*=>\s*'(.*?)',/\1/p" ${nc_config})"
pg_name="$(sed -rnE "s/^\s*'dbname'\s*=>\s*'(.*?)',/\1/p" ${nc_config})"
pg_user="$(sed -rnE "s/^\s*'dbuser'\s*=>\s*'(.*?)',/\1/p" ${nc_config})"
pg_password="$(sed -rnE "s/^\s*'dbpassword'\s*=>\s*'(.*?)',/\1/p" ${nc_config})"

# Create destination directories
mkdir -p ${backup_destination}
chmod 755 ${backup_destination}

[[ $(grep -Fq maintenance ${nc_config}) -eq 0 ]] || sed -i -E "s/(\);)/  'maintenance' => false,\n\1/" ${nc_config}
enable_maintenence

# --- DUMP DATABASE ---

log "Dumping Nextcloud database to ${backup_destination}/backup_postgres.bak.gz"
PGPASSWORD=${pg_password} pg_dump ${pg_name} -h ${pg_host} -U ${pg_user} | zstd --rsyncable --format=gzip -9 -q > ${backup_destination}/backup_postgres.bak.gz
if [[ ${?} -eq 0 ]]; then
  log_done
else
  error "Dump failed"
fi

# --- ARCHIVE AND COMPRESS NEXTCLOUD FILES ---

log "Packing ${backup_source}/ to ${backup_destination}/backup_nextcloud.tar.gz. This may take a while..."
/bin/tar --warning='no-file-ignored' -I "zstd --rsyncable --format=gzip -9 -q" -Pcpf ${backup_destination}/backup_nextcloud.tar.gz ${backup_source}/
[[ ${?} -ne 0 ]] && error_exit "Tar failed"
log_done

# --- ROTATE ---

 if [[ "$(ls -1r ${backup_destination} | tail -n +$((${BACKUP_ROTATIONS} + 2)) | wc -l)" -gt 0 ]]; then
  log "Removing deprecated backup files..."
  ls -1rF ${backup_destination} | tail -n +$((${BACKUP_ROTATIONS} + 2)) | xargs rm -Rf "{}"
  log_done
fi

# --- SUMMARY ---

disable_maintenence
log "Successfully created Nextcloud backup ${backup_destination} ($(du -sh ${backup_destination} | cut -f1)B)"
exit 0
